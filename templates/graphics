if request.form['graphic']== 'histogramme':
            line_chart = pygal.Bar()
            line_chart.title = 'Browser usage evolution (in %)'
            line_chart.x_labels = map(str, range(2002, 2013))
            line_chart.add('Firefox', [None, None, 0, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8, 37.1])
            line_chart.add('Chrome',  [None, None, None, None, None, None,    0,  3.9, 10.8, 23.8, 35.3])
            line_chart.add('IE',      [85.8, 84.6, 84.7, 74.5,   66, 58.6, 54.7, 44.8, 36.2, 26.6, 20.1])
            line_chart.add('Others',  [14.2, 15.4, 15.3,  8.9,    9, 10.4,  8.9,  5.8,  6.7,  6.8,  7.5])
            line_chart.render()
            
        if request.form['graphic'] == 'dateY':
            from datetime import datetime, timedelta
            datey = pygal.DateY(x_label_rotation=20)
            datey.add("Visits", [
                (datetime(2013, 1, 2), 300),
                (datetime(2013, 1, 12), 412),
                (datetime(2013, 2, 2), 823),
                (datetime(2013, 2, 22), 672)
            ])
            datey.render()
            
        if request.form['graphic'] == 'horloge':
            gauge_chart = pygal.Gauge(human_readable=True)
            gauge_chart.title = 'DeltaBlue V8 benchmark results'
            gauge_chart.x_labels = ['Richards', 'DeltaBlue', 'Crypto', 'RayTrace', 'EarleyBoyer', 'RegExp', 'Splay', 'NavierStokes']
            gauge_chart.range = [0, 10000]
            gauge_chart.add('Chrome', 8212)
            gauge_chart.add('Firefox', 8099)
            gauge_chart.add('Opera', 2933)
            gauge_chart.add('IE', 41)
            gauge_chart.render()
            
        #if request.form['display'] == day
            #db = get_db()
            #cur = db.execute('select count(*) from ok where month = month + year group by day,month,year order by day')
            #db.commit()
            return redirect('show_grapĥics.html')
        else:
           # db = get_db()
            #cur = db.execute('select count(*) from ok where month = month+year group by hour order by hour')
            #db.commit()
            return redirect('show_grapĥics.html')
    else:
        return render_template('show_graphics.html')

